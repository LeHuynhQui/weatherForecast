{"ast":null,"code":"var _jsxFileName = \"/Users/lehuynhqui/Documents/INTERN/CyberSoft/weather-react/src/components/ChartHumidity.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment } from 'react';\nimport { useSelector } from 'react-redux';\nimport Chart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChartHumidity() {\n  _s();\n\n  const {\n    weatherNextDays\n  } = useSelector(state => state.WeatherReducer);\n  const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  let mangdate = [];\n  let mangWeather = [];\n  let mangHumi = [];\n\n  if (weatherNextDays) {\n    weatherNextDays.list.map((weather, index) => {\n      if (weather.dt_txt.slice(11) === \"12:00:00\") {\n        // PUSH DATE\n        const DATE = new Date(weather.dt_txt);\n        const date = String(DATE.getDate()).padStart(2, '0');\n        const monthLetter = monthNames[DATE.getMonth()];\n        const dateText = `${date} ${monthLetter}`;\n        mangdate.push(dateText); // PUSH MANG WEATHER\n\n        mangWeather.push(weather); // PUSH HUMI VALUE\n\n        mangHumi.push(weather.main.humidity);\n      }\n    });\n  }\n\n  let series = [{\n    name: \"TEMPERATURE\",\n    data: mangHumi\n  }];\n  let options = {\n    xaxis: {\n      categories: mangdate\n    },\n    chart: {\n      type: 'area',\n      height: 350,\n      zoom: {\n        enabled: true\n      }\n    },\n    dataLabels: {\n      enabled: true\n    },\n    stroke: {\n      curve: 'smooth'\n    },\n    title: {\n      text: 'Unit: %',\n      align: 'left'\n    },\n    subtitle: {\n      text: 'Comparison data at 12:00:00 on each day',\n      align: 'left'\n    },\n    yaxis: {\n      opposite: true\n    },\n    legend: {\n      horizontalAlign: 'right'\n    },\n    colors: ['#2E93fA']\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: weatherNextDays ? /*#__PURE__*/_jsxDEV(Chart, {\n      options: options,\n      series: series,\n      height: 350\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 33\n    }, this) : \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartHumidity, \"eX97CGFtmZBKJI38g7WNDwThAVg=\", false, function () {\n  return [useSelector];\n});\n\n_c = ChartHumidity;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartHumidity\");","map":{"version":3,"sources":["/Users/lehuynhqui/Documents/INTERN/CyberSoft/weather-react/src/components/ChartHumidity.js"],"names":["React","Fragment","useSelector","Chart","ChartHumidity","weatherNextDays","state","WeatherReducer","monthNames","mangdate","mangWeather","mangHumi","list","map","weather","index","dt_txt","slice","DATE","Date","date","String","getDate","padStart","monthLetter","getMonth","dateText","push","main","humidity","series","name","data","options","xaxis","categories","chart","type","height","zoom","enabled","dataLabels","stroke","curve","title","text","align","subtitle","yaxis","opposite","legend","horizontalAlign","colors"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Chart from \"react-apexcharts\";\n\nexport default function ChartHumidity() {\n    const { weatherNextDays } = useSelector(state => state.WeatherReducer)\n\n\n\n    const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n        \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n\n\n\n\n    let mangdate = [];\n    let mangWeather = [];\n    let mangHumi = [];\n\n\n\n\n\n    if (weatherNextDays) {\n\n        weatherNextDays.list.map((weather, index) => {\n\n            if (weather.dt_txt.slice(11) === \"12:00:00\") {\n                // PUSH DATE\n                const DATE = new Date(weather.dt_txt)\n                const date = String(DATE.getDate()).padStart(2, '0');\n                const monthLetter = monthNames[DATE.getMonth()]\n                const dateText = `${date} ${monthLetter}`\n                mangdate.push(dateText)\n\n\n                // PUSH MANG WEATHER\n                mangWeather.push(weather)\n\n                // PUSH HUMI VALUE\n                mangHumi.push(weather.main.humidity)\n\n\n\n            }\n\n        });\n\n    }\n\n    let series = [\n        {\n            name: \"TEMPERATURE\",\n            data: mangHumi\n        }\n    ]\n\n\n    let options = {\n        xaxis: {\n            categories: mangdate\n        },\n        chart: {\n            type: 'area',\n            height: 350,\n            zoom: {\n                enabled: true\n            }\n        },\n        dataLabels: {\n            enabled: true\n        },\n        stroke: {\n            curve: 'smooth'\n        },\n        title: {\n            text: 'Unit: %',\n            align: 'left'\n        },\n        subtitle: {\n            text: 'Comparison data at 12:00:00 on each day',\n            align: 'left'\n        },\n        yaxis: {\n            opposite: true\n        },\n        legend: {\n            horizontalAlign: 'right'\n        },\n\n        colors: ['#2E93fA']\n    };\n\n\n\n\n\n\n\n\n\n\n    return (\n        <Fragment>\n            { weatherNextDays ? <Chart\n                options={options}\n                series={series}\n                height={350}\n            /> : \"\"}\n        </Fragment>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}