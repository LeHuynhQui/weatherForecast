{"ast":null,"code":"var _jsxFileName = \"/Users/lehuynhqui/Documents/INTERN/CyberSoft/weather-react/src/components/ChartTemperature.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport ApexCharts from 'apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChartTemperature() {\n  _s();\n\n  const {\n    weatherNextDays\n  } = useSelector(state => state.WeatherReducer);\n  const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n  const renderChartTemp = (mangTemp, mangDate) => {\n    const series = {\n      temperature: {\n        value: mangTemp,\n        dates: mangDate\n      }\n    };\n    var options = {\n      series: [{\n        name: \"TEMPERATURE\",\n        data: series.temperature.value\n      }],\n      chart: {\n        type: 'area',\n        height: 350,\n        zoom: {\n          enabled: true\n        }\n      },\n      dataLabels: {\n        enabled: true\n      },\n      stroke: {\n        curve: 'smooth'\n      },\n      title: {\n        text: 'Unit: °C',\n        align: 'left'\n      },\n      subtitle: {\n        text: 'Comparison data at 12:00:00 on each day',\n        align: 'left'\n      },\n      labels: series.temperature.dates,\n      yaxis: {\n        opposite: true\n      },\n      legend: {\n        horizontalAlign: 'right'\n      }\n    };\n    var chart = new ApexCharts(document.querySelector(\"#temperature-chart\"), options);\n    chart.render();\n  };\n\n  let mangdate = [];\n  let mangWeather = [];\n  let mangTemp = [];\n\n  if (weatherNextDays) {\n    weatherNextDays.map((weather, index) => {\n      if (weather.dt_txt.slice(11) == \"12:00:00\") {\n        // PUSH DATE\n        const DATE = new Date(weather.dt_txt);\n        const date = String(DATE.getDate()).padStart(2, '0');\n        const monthLetter = monthNames[DATE.getMonth()];\n        const dateText = `${date} ${monthLetter}`;\n        mangdate.push(dateText); // PUSH MANG WEATHER\n\n        mangWeather.push(weather); // PUSH TEMP VALUE\n\n        mangTemp.push(Math.round(Number(weather.main.temp) - 273.15));\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: renderChartTemp(mangTemp, mangdate)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChartTemperature, \"eX97CGFtmZBKJI38g7WNDwThAVg=\", false, function () {\n  return [useSelector];\n});\n\n_c = ChartTemperature;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartTemperature\");","map":{"version":3,"sources":["/Users/lehuynhqui/Documents/INTERN/CyberSoft/weather-react/src/components/ChartTemperature.js"],"names":["React","Fragment","useEffect","useSelector","ApexCharts","ChartTemperature","weatherNextDays","state","WeatherReducer","monthNames","renderChartTemp","mangTemp","mangDate","series","temperature","value","dates","options","name","data","chart","type","height","zoom","enabled","dataLabels","stroke","curve","title","text","align","subtitle","labels","yaxis","opposite","legend","horizontalAlign","document","querySelector","render","mangdate","mangWeather","map","weather","index","dt_txt","slice","DATE","Date","date","String","getDate","padStart","monthLetter","getMonth","dateText","push","Math","round","Number","main","temp"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport ApexCharts from 'apexcharts';\n\nexport default function ChartTemperature() {\n\n    const { weatherNextDays } = useSelector(state => state.WeatherReducer)\n\n\n\n    const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n    const renderChartTemp = (mangTemp, mangDate) => {\n        const series = {\n            temperature: {\n                value: mangTemp,\n                dates: mangDate\n            },\n        }\n\n        var options = {\n            series: [{\n                name: \"TEMPERATURE\",\n                data: series.temperature.value\n            }],\n            chart: {\n                type: 'area',\n                height: 350,\n                zoom: {\n                    enabled: true\n                }\n            },\n            dataLabels: {\n                enabled: true\n            },\n            stroke: {\n                curve: 'smooth'\n            },\n            title: {\n                text: 'Unit: °C',\n                align: 'left'\n            },\n            subtitle: {\n                text: 'Comparison data at 12:00:00 on each day',\n                align: 'left'\n            },\n            labels: series.temperature.dates,\n\n            yaxis: {\n                opposite: true\n            },\n            legend: {\n                horizontalAlign: 'right'\n            }\n        };\n\n        var chart = new ApexCharts(document.querySelector(\"#temperature-chart\"), options);\n        chart.render();\n\n    }\n\n    let mangdate = [];\n    let mangWeather = [];\n    let mangTemp = [];\n\n\n    if (weatherNextDays) {\n        weatherNextDays.map((weather,index) => {\n        \n            if (weather.dt_txt.slice(11) == \"12:00:00\") {\n              // PUSH DATE\n              const DATE = new Date(weather.dt_txt)\n              const date = String(DATE.getDate()).padStart(2, '0');\n              const monthLetter = monthNames[DATE.getMonth()]\n              const dateText = `${date} ${monthLetter}`\n              mangdate.push(dateText)\n    \n    \n              // PUSH MANG WEATHER\n              mangWeather.push(weather)\n    \n              // PUSH TEMP VALUE\n              mangTemp.push(Math.round(Number(weather.main.temp) - 273.15))\n            }\n    \n          });\n    \n    }\n    return (\n        <Fragment>\n            {renderChartTemp(mangTemp, mangdate)}\n        </Fragment>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}